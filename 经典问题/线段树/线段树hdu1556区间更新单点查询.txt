#include <bits/stdc++.h>
using namespace std;
int tree[327543],lazy[327543];   //大约是n的四倍，数组小了还会TLE 
void build(int root,int nstart,int nend)
{
	lazy[root]=0;       //!!!
	if(nstart==nend)  
	{
		tree[root]=0;
		sum[root]=tree[root];
		return;
	}
	int mid=(nstart+nend)/2;
	build(root*2,nstart,mid);
	build(root*2+1,mid+1,nend);
	tree[root]=tree[root*2]+tree[root*2+1];	    
}
void pushdown(int root,int nstart,int nend)
{
	//int len=nend-nstart+1;           
	int mid=(nend+nstart)/2;             //这两种表达等价，都是求左右子树的大小 
	lazy[root*2]+=lazy[root];
	//tree[root*2]+=lazy[root]*(len-len/2);   //考虑到len为奇数的情况 
    tree[root*2]+=lazy[root]*(mid+1-nstart);
	lazy[root*2+1]+=lazy[root];
	//tree[root*2+1]+=lazy[root]*(len/2);
	tree[root*2+1]+=lazy[root]*(nend-(mid+1)+1);	
	lazy[root]=0;          //!!! 
	return;
}
void update(int root,int nstart,int nend,int qstart,int qend,int add)
{
	if(qstart<=nstart&&qend>=nend)  
	{
		 tree[root]+=(nend-nstart+1)*add;
		 lazy[root]+=add;
		 return;
	}
	if(lazy[root]!=0)    
	    pushdown(root,nstart,nend);
	int mid=(nstart+nend)/2;
	if(qstart<=mid)      update(root*2,nstart,mid,qstart,qend,add);
	if(qend>mid)         update(root*2+1,mid+1,nend,qstart,qend,add);
	tree[root]=tree[root*2]+tree[root*2+1];

}
int query(int root,int nstart,int nend,int qstart,int qend)
{
	if(qstart>nend||qend<nstart)  return 0;
	if(qstart<=nstart&&qend>=nend)  return tree[root];
	if(lazy[root]!=0)  
	    pushdown(root,nstart,nend);
	int s=0;
	int mid=(nstart+nend)/2;
	s+=query(root*2,nstart,mid,qstart,qend);
	s+=query(root*2+1,mid+1,nend,qstart,qend);
	return s;
}
int main()
{
    int t;
    while(scanf("%d",&t),t!=0)
    {
    	memset(tree,0,sizeof(tree));
    	memset(lazy,0,sizeof(lazy));
    	build(1,1,t);
    	for(int i=1;i<=t;i++)
    	{
    		int a,b;
    		scanf("%d%d",&a,&b);
    		update(1,1,t,a,b,1);
		}
		for(int i=1;i<=t;i++)
		{
			if(i!=t)    printf("%d ",query(1,1,t,i,i));
			else      	printf("%d\n",query(1,1,t,i,i));
		}
	}
    
 } 