#include <bits/stdc++.h>
using namespace std;
int tree[6275430];   //大约是n的四倍，数组小了还会TLE 
void build(int root,int nstart,int nend)
{
    if(nstart==nend)  
    {
    	scanf("%d",&tree[root]);
		return;
    }
    int mid=(nstart+nend)/2;
    build(root*2,nstart,mid);
    build(root*2+1,mid+1,nend);  
    tree[root]=max(tree[root*2],tree[root*2+1]);
}

void update(int root,int nstart,int nend,int qstart,int qend,int add)
{
    if(qstart<=nstart&&qend>=nend)   
    {
        tree[root]=add;
        return ;
    }
    int mid=(nstart+nend)/2;
    if(qstart<=mid)      update(root*2,nstart,mid,qstart,qend,add);
    if(qend>mid)         update(root*2+1,mid+1,nend,qstart,qend,add);
    tree[root]=max(tree[root*2],tree[root*2+1]);
}
int query(int root,int nstart,int nend,int qstart,int qend)
{
    
    if(qstart>nend||qend<nstart)         return 0;
    else if(qstart<=nstart&&qend>=nend)  return tree[root];
    int mid=(nstart+nend)/2;
    return max(query(root*2,nstart,mid,qstart,qend),query(root*2+1,mid+1,nend,qstart,qend));
}
int main()
{
    int n,T;
    while(scanf("%d%d",&n,&T)!=EOF)
    {        
        build(1,1,n);
        for(int  i=0;i<T;i++)
        {
            char c;
            getchar();    //!!!!!!!
            scanf("%c",&c);
            int t,tt;
            scanf("%d%d",&t,&tt);
            if(c=='U')           update(1,1,n,t,t,tt);
            else  if(c=='Q')      printf("%d\n",query(1,1,n,t,tt));
        }
     } 
 }